"""initial

Revision ID: 38e5927000be
Revises:
Create Date: 2025-06-17 19:15:25.522701

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "38e5927000be"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "praxis",
        sa.Column(
            "is_activated",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=256), nullable=False),
        sa.Column("text", sa.String(length=2048), nullable=False),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_praxis")),
    )
    op.create_table(
        "subscription_plans",
        sa.Column(
            "is_activated",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=False,
        ),
        sa.Column(
            "is_flexible",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "is_premium",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=True,
        ),
        sa.Column("title", sa.String(length=256), nullable=False),
        sa.Column("description", sa.String(length=2048), nullable=False),
        sa.Column("price", sa.BigInteger(), nullable=False),
        sa.Column("total_classes_monthly", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscription_plans")),
    )
    op.create_table(
        "users",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column(
            "is_activated",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=False,
        ),
        sa.Column(
            "is_admin",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "is_superadmin",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("language", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("telegram_id", name=op.f("uq_users_telegram_id")),
    )
    op.create_table(
        "diarys",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("week", sa.Integer(), nullable=False),
        sa.Column("line", sa.Integer(), nullable=False),
        sa.Column("answer", sa.String(length=2048), nullable=False),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["users.telegram_id"],
            name=op.f("fk_diarys_telegram_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_diarys")),
    )
    op.create_table(
        "praxi_files",
        sa.Column("praxi_id", sa.UUID(), nullable=False),
        sa.Column("file_name", sa.String(length=255), nullable=False),
        sa.Column("file_type", sa.String(length=50), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column("category", sa.String(length=15), nullable=False),
        sa.Column("content", sa.LargeBinary(), nullable=False),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["praxi_id"],
            ["praxis.id"],
            name=op.f("fk_praxi_files_praxi_id_praxis"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_praxi_files")),
    )
    op.create_table(
        "receive_praxis",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("praxi_id", sa.UUID(), nullable=False),
        sa.Column(
            "is_completed",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("status", sa.SmallInteger(), nullable=False),
        sa.Column("rating", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["praxi_id"],
            ["praxis.id"],
            name=op.f("fk_receive_praxis_praxi_id_praxis"),
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["users.telegram_id"],
            name=op.f("fk_receive_praxis_telegram_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_receive_praxis")),
    )
    op.create_table(
        "subscriptions",
        sa.Column(
            "is_activated",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=False,
        ),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("plan_id", sa.UUID(), nullable=False),
        sa.Column(
            "start_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("end_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("canceled_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"],
            ["subscription_plans.id"],
            name=op.f("fk_subscriptions_plan_id_subscription_plans"),
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["users.telegram_id"],
            name=op.f("fk_subscriptions_telegram_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscriptions")),
    )
    op.create_table(
        "tests",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "is_completed",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("score_test_1", sa.Integer(), nullable=True),
        sa.Column("score_test_2", sa.Integer(), nullable=True),
        sa.Column("score_test_3", sa.Integer(), nullable=True),
        sa.Column("score_test_4", sa.Integer(), nullable=True),
        sa.Column("score_test_5", sa.Integer(), nullable=True),
        sa.Column("score_test_6", sa.Integer(), nullable=True),
        sa.Column("score_test_7", sa.Integer(), nullable=True),
        sa.Column("score_test_8", sa.Integer(), nullable=True),
        sa.Column("score_test_9", sa.Integer(), nullable=True),
        sa.Column("score_test_10", sa.Integer(), nullable=True),
        sa.Column("score_test_11", sa.Integer(), nullable=True),
        sa.Column("score_test_12", sa.Integer(), nullable=True),
        sa.Column("score_test_13", sa.Integer(), nullable=True),
        sa.Column("score_test_14", sa.Integer(), nullable=True),
        sa.Column("score_all", sa.Integer(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["users.telegram_id"],
            name=op.f("fk_tests_telegram_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tests")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tests")
    op.drop_table("subscriptions")
    op.drop_table("receive_praxis")
    op.drop_table("praxi_files")
    op.drop_table("diarys")
    op.drop_table("users")
    op.drop_table("subscription_plans")
    op.drop_table("praxis")
    # ### end Alembic commands ###
